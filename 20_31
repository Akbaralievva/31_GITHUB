// Definition for singly-linked list
class ListNode {
    var val: Int
    var next: ListNode?
    
    init(_ val: Int) {
        self.val = val
        self.next = nil
    }
}

func reverseList(_ head: ListNode?) -> ListNode? {
    var prev: ListNode? = nil
    var current = head

    while current != nil {
        let nextNode = current?.next
        current?.next = prev
        prev = current
        current = nextNode
    }

    return prev
}

// Example usage:
let head = ListNode(1)
head.next = ListNode(2)
head.next?.next = ListNode(3)
head.next?.next?.next = ListNode(4)
head.next?.next?.next?.next = ListNode(5)

print("Original List:")
var currentNode: ListNode? = head
while currentNode != nil {
    print(currentNode!.val, terminator: " ")
    currentNode = currentNode?.next
}

let reversedHead = reverseList(head)

print("\nReversed List:")
var reversedNode: ListNode? = reversedHead
while reversedNode != nil {
    print(reversedNode!.val, terminator: " ")
    reversedNode = reversedNode?.next
}

class Graph {
    var adjacencyList: [Int: [Int]] = [:]

    func addEdge(_ u: Int, _ v: Int) {
        if adjacencyList[u] == nil {
            adjacencyList[u] = []
        }
        adjacencyList[u]?.append(v)

        if adjacencyList[v] == nil {
            adjacencyList[v] = []
        }
        adjacencyList[v]?.append(u)
    }

    func shortestPath(_ start: Int, _ end: Int) -> [Int]? {
        var visited: Set<Int> = []
        var queue: [(node: Int, path: [Int])] = []

        queue.append((node: start, path: [start]))
        visited.insert(start)

        while !queue.isEmpty {
            let (currentNode, currentPath) = queue.removeFirst()

            guard let neighbors = adjacencyList[currentNode] else { continue }

            for neighbor in neighbors {
                if !visited.contains(neighbor) {
                    let newPath = currentPath + [neighbor]

                    if neighbor == end {
                        return newPath
                    }

                    visited.insert(neighbor)
                    queue.append((node: neighbor, path: newPath))
                }
            }
        }

        return nil
    }
}

// Пример использования:
let cityMap = Graph()
cityMap.addEdge(1, 2)
cityMap.addEdge(1, 3)
cityMap.addEdge(2, 4)
cityMap.addEdge(3, 5)
cityMap.addEdge(4, 6)
cityMap.addEdge(5, 6)

if let shortestPath = cityMap.shortestPath(1, 6) {
    print("Кратчайший путь: \(shortestPath)")
} else {
    print("Путь не найден.")
}

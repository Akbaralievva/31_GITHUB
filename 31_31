class Graph {
    var adjacencyList: [Int: [Int]] = [:]

    func addEdge(_ from: Int, _ to: Int) {
        if adjacencyList[from] == nil {
            adjacencyList[from] = []
        }
        adjacencyList[from]?.append(to)
    }

    func shortestPath(_ startNode: Int, _ targetNode: Int) -> [Int]? {
        var queue: [Int] = [startNode]
        var visited: Set<Int> = [startNode]
        var path: [Int: Int] = [startNode: -1]

        while !queue.isEmpty {
            let currentNode = queue.removeFirst()

            if currentNode == targetNode {
                // Reconstruct the path
                var shortestPath: [Int] = []
                var current = currentNode

                while current != -1 {
                    shortestPath.insert(current, at: 0)
                    current = path[current]!
                }

                return shortestPath
            }

            if let neighbors = adjacencyList[currentNode] {
                for neighbor in neighbors {
                    if !visited.contains(neighbor) {
                        queue.append(neighbor)
                        visited.insert(neighbor)
                        path[neighbor] = currentNode
                    }
                }
            }
        }

        return nil // No path found
    }
}

// Example usage:
let graph = Graph()
graph.addEdge(0, 1)
graph.addEdge(0, 2)
graph.addEdge(1, 3)
graph.addEdge(1, 4)
graph.addEdge(2, 5)
graph.addEdge(2, 6)
graph.addEdge(3, 7)
graph.addEdge(4, 8)
graph.addEdge(5, 9)
graph.addEdge(6, 10)

let startNode = 0
let targetNode = 9

if let path = graph.shortestPath(startNode, targetNode) {
    print("Shortest path from \(startNode) to \(targetNode): \(path)")
} else {
    print("No path found from \(startNode) to \(targetNode).")
}
